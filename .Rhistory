randomForest(modRF)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modRF <- randomForest(y ~ ., data = vowel.train)
print(modRF)
importance(modRF)
plot(varImp(modRF))
importance(modRF)
varImpPlot(modRF)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modRF <- randomForest(y ~ ., data = vowel.train)
print(modRF)
library(randomForest)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modRF <- randomForest(y ~ ., data = vowel.train)
print(modRF)
importance(modRF)
varImpPlot(modRF)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modRF <- train(y ~ ., data = vowel.train, method= "rf", trControl = trainControl(method = "cv"))
print(modRF)
varImp(modRF)
plot(varImp(modRF))
varImp.radomForest(modRF)
plot(varImp.radomForest(modRF))
varImp.randomForest(modRF)
plot(varImp.randomForest(modRF))
varImp.RandomForest(modRF)
plot(varImp.RandomForest(modRF))
library(party)
varImp.RandomForest(modRF)
plot(varImp.RandomForest(modRF))
varImp(modRF)
plot(varImp(modRF))
varImp(modRF,scale = FALSE)
plot(varImp(modRF,scale = FALSE))
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modRF <- randomForest(y ~ ., data = vowel.train)
print(modRF)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modRF1 <- train(y ~ ., data = vowel.train, method= "rf", trControl = trainControl(method = "cv"))
print(modRF)
importance(modRF)
importance(modRF1)
varImp(modRF)
importance(modRF1)
plot(varImp(modRF),varImp(modRF1))
par(mfrow = c(1,2))
plot(varImp(modRF))
plot(varImp(modRF1))
par(mfrow = c(1,2));varImpPlot(modRF);plot(varImp(modRF1))
library(ElemStatLearn); data(prostate)
str(prostate)
library(caret)
library(caret)
data(mdrr)
mdrrDescr <- mdrrDescr[,-nearZeroVar(mdrrDescr)]
mdrrDescr <- mdrrDescr[, -findCorrelation(cor(mdrrDescr), .8)]
set.seed(1)
inTrain <- createDataPartition(mdrrClass, p = .75, list = FALSE)[,1]
train <- mdrrDescr[ inTrain, ]
test  <- mdrrDescr[-inTrain, ]
trainClass <- mdrrClass[ inTrain]
testClass  <- mdrrClass[-inTrain]
set.seed(2)
ldaProfile <- rfe(train, trainClass,
sizes = c(1:10, 15, 30),
rfeControl = rfeControl(functions = ldaFuncs, method = "cv"))
plot(ldaProfile, type = c("o", "g"))
postResample(predict(ldaProfile, test), testClass)
2 ^ -0.013
-1.5
2 ^ -1.5
2 ^ -1
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, results = "markup", fig.align = "center",
fig.width = 5, fig.height = 5)
setwd("~/Desktop/2016/Data_science/Kaggle/Kaggle-Competition-Titanic")
# Chunk 2
training <- read.csv("train.csv", stringsAsFactors = FALSE, na.strings = "")
testing <- read.csv("test.csv", stringsAsFactors = FALSE,na.strings = "")
# Chunk 3
library(caret)
set.seed(1234)
InTrain <- createDataPartition(y=training$Survived,p = 0.7,list = FALSE)
tune.test.set <- training[-InTrain,]
training <- training[InTrain,]
# Chunk 4
summary(training)
table(training$Sex)
table(training$Cabin)
table(training$Embarked)
# Chunk 5
#Exploration by pairs plot:
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
table(training$Survived, training$Embarked)
# Clearly more Females survived
table(training$Survived,training$Sex)
# Consistent with the Class ~ Survival relationship
boxplot(log(Fare) ~ Survived, data = training)
library(ggplot2)
ggplot(aes(x = SibSp, fill = factor(Survived)), data = training)+
geom_bar(stat = "count")+
theme_bw()
ggplot(aes(x = Parch, fill = factor(Survived)), data = training)+
geom_bar(stat = "count")+
theme_bw()
boxplot(SibSp ~ Survived, data = training)
boxplot(Parch ~ Survived, data = training)
# Chunk 6
training <- transform(training,Survived = factor(Survived), Pclass = factor(Pclass),
Sex = factor(Sex),SibSp = factor(SibSp), Parch = factor(Parch), Embarked = factor(Embarked))
tune.test.set <- transform(tune.test.set,Survived = factor(Survived), Pclass = factor(Pclass),Sex = factor(Sex),SibSp = factor(SibSp), Parch = factor(Parch), Embarked = factor(Embarked))
testing <- transform(testing, Pclass = factor(Pclass),
Sex = factor(Sex),SibSp = factor(SibSp), Parch = factor(Parch), Embarked = factor(Embarked))
# Chunk 7
library(dplyr)
training <- dplyr::select(training,-PassengerId)
tune.test.set <- dplyr::select(tune.test.set,-PassengerId)
# Chunk 8
training.na <- as.data.frame(is.na(training));names(training.na) <- names(training)
apply(training.na,2,sum)
# Chunk 9
library(ggplot2); library(dplyr)
Cabin.letter <-substr(training$Cabin[!training.na$Cabin],1,1)
Cabin.survival <- training$Survived[!training.na$Cabin]
Cabin.Pclass <- training$Pclass[!training.na$Cabin]
qplot(x = factor(Cabin.letter), fill = Cabin.survival)+scale_fill_manual(values = c("red","navy"))+theme_bw()
# Chunk 10
qplot(x = factor(Cabin.letter), fill = Cabin.Pclass)+scale_fill_manual(values = c("red","navy","green"))+theme_bw()
# Chunk 11
Cabin.Fare <- training$Fare[!training.na$Cabin]
qplot(x = factor(Cabin.letter), y=Cabin.Fare, color = Cabin.survival)+theme_bw()
# Chunk 12
training <- dplyr::select(training, - Cabin)
tune.test.set <- dplyr::select(tune.test.set, -Cabin)
testing <- dplyr::select(testing, -Cabin)
# Chunk 13
qplot(x = SibSp, y = Age, color = Survived, data = training)+
theme_bw()
# Chunk 14
ggplot(data = training, aes(x = Age, fill= Survived))+
geom_histogram(bins = 40)+facet_grid(. ~ SibSp)+ scale_fill_manual(values = c("red","navy"))+
theme_bw()
# Chunk 15
ggplot(data = training, aes(x = Age, fill= Survived))+
geom_histogram(bins = 40)+facet_grid(. ~ Sex)+ scale_fill_manual(values = c("red","navy"))+
theme_bw()
# Chunk 16
ggplot(data = training, aes(x = Age, fill= Survived))+
geom_histogram(bins = 40)+facet_grid(. ~ Pclass)+ scale_fill_manual(values = c("red","navy"))+
theme_bw()
training %>% group_by(Pclass,Survived) %>% summarise(mean(Age,na.rm=T))
# Chunk 17
lmAge = lm(Age ~ Sex + Pclass, data = training, na.action = "na.omit")
summary(lmAge)
par(mfrow = c(2,2))
plot(lmAge)[1]
plot(lmAge)[2]
plot(lmAge)[3]
plot(lmAge)[4]
# Chunk 18
complete.cases.Age <- training$Age[complete.cases(training$Age)]
after.imputation.Age <-c(complete.cases.Age,predict(lmAge, newdata = training[is.na(training$Age),]))
just.imputed.observations.Age <- after.imputation.Age[!complete.cases(training$Age)]
par(mfrow = c(1,3))
hist(complete.cases.Age,breaks = 20,col = "navy");
hist(after.imputation.Age,breaks = 20,col = "lightgreen");
hist(just.imputed.observations.Age,breaks = 20, col = "purple")
# Chunk 19
training$Age[is.na(training$Age)] = predict(lmAge, newdata = training[is.na(training$Age),])
tune.test.set$Age[is.na(tune.test.set$Age)] = predict(lmAge, newdata = tune.test.set[is.na(tune.test.set$Age),])
testing$Age[is.na(testing$Age)] = predict(lmAge, newdata = testing[is.na(testing$Age),])
# Chunk 20
training.na <- as.data.frame(is.na(training));names(training.na) <- names(training)
apply(training.na,2,sum)
tune.testing.na <- as.data.frame(is.na(tune.test.set));names(tune.testing.na) <- names(tune.test.set)
apply(tune.testing.na ,2,sum)
testing.na <- as.data.frame(is.na(testing));names(testing.na) <- names(testing)
apply(testing.na ,2,sum)
# Chunk 21
training <- training[complete.cases(training),]
tune.test.set <- tune.test.set[complete.cases(tune.test.set),]
testing <- testing[complete.cases(testing),]
# Chunk 22
library(caret)
which(sapply(training[,-1],is.factor))
# There are 5 categorical predictors in out data set
factors.training <- which(sapply(training,is.factor))
factors.tune.test.set <- which(sapply(tune.test.set,is.factor))
factors.testing <- which(sapply(testing,is.factor))
dummies.training <- dummyVars(Survived ~ Pclass + Sex + SibSp + Parch + Embarked, data = training)
dummies.tune.test.set <- dummyVars(Survived ~ Pclass + Sex + SibSp + Parch + Embarked, data = tune.test.set)
dummies.testing <- dummyVars(PassengerId ~ Pclass + Sex + SibSp + Parch + Embarked, data = testing)
# Add the dummy variables to both training and test data sets, simultaneously removing the existing factor variables:
training <- cbind(training[,-factors.training[-1]], predict(dummies.training,newdata = training))
tune.test.set <- cbind(tune.test.set[,-factors.tune.test.set[-1]], predict(dummies.tune.test.set,newdata = tune.test.set))
testing <- cbind(testing[,-factors.testing], predict(dummies.testing,newdata = testing))
# Chunk 23
training <- training[,names(training) %in% names(tune.test.set)]
tune.test.set <- tune.test.set[,names(tune.test.set) %in% names(training)]
identical(names(training),names(tune.test.set))
PassengerId <- testing$PassengerId
testing <- testing[,names(testing) %in% names(training)]
testing$PassengerId <- PassengerId
# Chunk 24
Ticket <- toupper(training$Ticket)
# Better to remove anything left of the last white space
w <- grep(" ", Ticket)
last.space<- sapply(gregexpr(" ",Ticket[w]), function(y){
max(y[1])
})
Ticket[w] <- substring(Ticket[w],last.space+1)
Ticket <- gsub(" ","", Ticket)
Ticket <- gsub("[A-Z]","",Ticket)
Ticket <- gsub("\\.","",Ticket)
Ticket <- gsub("\\/","", Ticket)
Ticket <- as.numeric(Ticket)
Ticket[is.na(Ticket)] = 0
Ticket <- as.numeric(Ticket)
qplot(x=Ticket, y = Fare, data = training, color = Survived)+theme_bw()
# Chunk 25
# Feature Engineering function
num.Ticket <- function(x){
Ticket <- toupper(x$Ticket)
# Better to remove anything left of the last white space
w <- grep(" ", Ticket)
last.space<- sapply(gregexpr(" ",Ticket[w]), function(y){
max(y[1])
})
Ticket[w] <- substring(Ticket[w],last.space+1)
Ticket <- gsub(" ","", Ticket)
Ticket <- gsub("[A-Z]","",Ticket)
Ticket <- gsub("\\.","",Ticket)
Ticket <- gsub("\\/","", Ticket)
Ticket <- as.numeric(Ticket)
Ticket <- as.numeric(Ticket)
return(Ticket)
}
training$num.Ticket <- num.Ticket(training)
tune.test.set$num.Ticket <- num.Ticket(tune.test.set)
testing$num.Ticket <- num.Ticket(testing)
sum(is.na(training$num.Ticket ))
sum(is.na(tune.test.set$num.Ticket ))
sum(is.na(testing$num.Ticket))
# Chunk 26
Pass.Names <- training$Name
first.comma<- sapply(gregexpr(",",Pass.Names), function(y){
y[1][1]
})
first.dot <- sapply(gregexpr("\\.",Pass.Names), function(y){
y[1][1]
})
Titles <- substr(Pass.Names,first.comma+2,first.dot-1)
qplot(x = factor(Titles), y = Age ,color = Survived, data = training)
# Chunk 27
# Feature engineering function:
Titles <- function(x){
Pass.Names <- x$Name
first.comma<- sapply(gregexpr(",",Pass.Names), function(y){
y[1][1]
})
first.dot <- sapply(gregexpr("\\.",Pass.Names), function(y){
y[1][1]
})
Titles <- substr(Pass.Names,first.comma+2,first.dot-1)
return(Titles)
}
training$Titles <- factor(Titles(training))
tune.test.set$Titles <- factor(Titles(tune.test.set))
testing$Titles <- factor(Titles(testing))
# Chunk 28
factors.training <- which(sapply(training,is.factor))
factors.tune.test.set <- which(sapply(tune.test.set,is.factor))
factors.testing <- which(sapply(testing,is.factor))
dummies.training <- dummyVars(Survived ~ Titles, data = training)
dummies.tune.test.set <- dummyVars(Survived ~ Titles, data = tune.test.set)
dummies.testing <- dummyVars(PassengerId ~ Titles, data = testing)
# Chunk 29
training <- cbind(training[,-factors.training[-1]], predict(dummies.training,newdata = training))
tune.test.set <- cbind(tune.test.set[,-factors.tune.test.set[-1]], predict(dummies.tune.test.set,newdata = tune.test.set))
testing <- cbind(testing[,-factors.testing], predict(dummies.testing,newdata = testing))
# Chunk 30
training <- training[,names(training) %in% names(tune.test.set)]
tune.test.set <- tune.test.set[,names(tune.test.set) %in% names(training)]
identical(names(training),names(tune.test.set))
PassengerId <- testing$PassengerId
testing <- testing[,names(testing) %in% names(training)]
testing$PassengerId <- PassengerId
# Chunk 31
training <- dplyr::select(training,-Ticket,-Name)
tune.test.set <- dplyr::select(tune.test.set ,-Ticket,-Name)
testing <- dplyr::select(testing,-Ticket,-Name)
# Chunk 32
training <- training[complete.cases(training),]
tune.test.set <- tune.test.set[complete.cases(tune.test.set),]
testing <- testing[complete.cases(testing),]
testing <- data.frame(PassengerId = testing$PassengerId, testing[,-27])
# Chunk 33
nsv <- nearZeroVar(x = training, saveMetrics = TRUE)
sum(!nsv$nzv)
# Chunk 34
training <- training[,!nsv$nzv]
tune.test.set <- tune.test.set[,!nsv$nzv]
testing <- testing[,!nsv$nzv]
# Chunk 35
M <- abs(cor(training[,-1])) # M is an absolute value correlation matrix representing the pairwise #correlations between all variables
diag(M) <- 0 # We replace the diagonal values with zero (just because these are the correations with  #themselves we are not interested in capturing them).
which(M > 0.8, arr.ind = TRUE) # What are the highest correated variables?
unique(row.names(which(M > 0.8, arr.ind = TRUE)))
cor.variables <- training[,unique(row.names(which(M > 0.8, arr.ind = TRUE)))]
cor.variables$Survived <- training$Survived
# Chunk 36
prePCA <- preProcess(cor.variables[,-6],method = "pca")
PCAcor <- predict(prePCA,cor.variables[,-6])
qplot(PCAcor$PC1,PCAcor$PC2, color = Survived, data = cor.variables)
qplot(PCAcor$PC3,PCAcor$PC2, color = Survived, data = cor.variables)
# Chunk 37
set.seed(125745)
RPART <- train(Survived ~ ., data = training,method = "rpart", trControl = trainControl(method = "cv", number = 10))
saveRDS(RPART,"RPART.rds") #Save model object for future loading if necessary
# Chunk 38
set.seed(125745)
RF <- train(Survived ~ ., data = training,method = "rf", trControl = trainControl(method = "cv", number = 10))
saveRDS(RF,"RF.rds") #Save model object for future loading if necessary
# Chunk 39
set.seed(125745)
GBM <- train(Survived ~ ., data = training,method = "gbm", trControl = trainControl(method = "cv", number = 10), verbose = FALSE)
saveRDS(GBM,"GBM.rds") #Save model object for future loading if necessary
# Chunk 40
set.seed(125745)
SVM <- train(Survived ~ ., data = training,method = "svmRadial", trControl = trainControl(method = "cv", number = 10))
# Takes very long time to run!!
saveRDS(SVM,"SVM.rds")
# Chunk 41
# Using resamples function from the caret package to summarize the data
modelsummary <- resamples(list(RPART=RPART,RF=RF,GBM=GBM,SVM=SVM))
# In-sample accuracy values for each model
summary(modelsummary)$statistics$Accuracy
# If necessary we can also produce 'variable importance' plots to see which variables are making most contributions #to each model
dotPlot(varImp(RPART))
dotPlot(varImp(RF))
dotPlot(varImp(SVM))
dotPlot(varImp(GBM))
#Exploration by pairs plot:
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
# Chunk 1: setup
knitr::opts_chunk$set(results = "markup", fig.align = "center",
fig.width = 5, fig.height = 5,message=FALSE,warning=FALSE)
# Chunk 2
setwd("~/Desktop/2016/Data_science/Kaggle/Kaggle-Competition-Titanic")
# Chunk 3
training <- read.csv("train.csv", stringsAsFactors = FALSE, na.strings = "")
testing <- read.csv("test.csv", stringsAsFactors = FALSE,na.strings = "")
# Chunk 4
library(caret)
set.seed(1234)
InTrain <- createDataPartition(y=training$Survived,p = 0.7,list = FALSE)
tune.test.set <- training[-InTrain,]
training <- training[InTrain,]
# Chunk 5
summary(training)
table(training$Sex)
table(training$Embarked)
#Exploration by pairs plot:
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
#Exploration by pairs plot:
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
legend("topleft", legend = c("Survived","Deceased"), col = c("navy","red"), pch = 19, cex = 1.5)
#Exploration by pairs plot:
par(mar= c(5,5,5,5))
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
legend("topleft", legend = c("Survived","Deceased"), col = c("navy","red"), pch = 19, cex = 1.5)
#Exploration by pairs plot:
par(mar= c(5,5,5,5))
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
legend("topright", legend = c("Survived","Deceased"), col = c("navy","red"), pch = 19, cex = 1.5)
#Exploration by pairs plot:
par(mar= c(10,5,5,5))
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
legend("topright", legend = c("Survived","Deceased"), col = c("navy","red"), pch = 19, cex = 1.5)
#Exploration by pairs plot:
par(mar= c(10,5,5,5))
plot(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
col= ifelse(training$Survived == 1, "navy","red"))
legend("topright", legend = c("Survived","Deceased"), col = c("navy","red"), pch = 19, cex = 1.5)
#Exploration by pairs plot:
plot(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
#Exploration by pairs plot:
par(mfrow = (2,2))
plot(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
col= ifelse(training$Survived == 1, "navy","red"))
legend("topright", legend = c("Survived","Deceased"), col = c("navy","red"), pch = 19, cex = 1.5)
#Exploration by pairs plot:
par(mfrow = c(2,2))
plot(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
#Exploration by pairs plot:
par(mfrow = c(2,2), mar = c(5,5,5,5))
plot(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
#Exploration by pairs plot:
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
#Exploration by pairs plot:
pairs(Survived ~ Age+ SibSp+Parch+Fare,pch =19, cex = 0.4,data=training,
col= ifelse(training$Survived == 1, "navy","red"))
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = Pclass, color = survived, data = training, geom = "box" )
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = Pclass, color = survived, data = training, geom = "geom_box" )
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = Pclass, color = survived, data = training, geom = "boxplot" )
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = Pclass, color = Survived, data = training, geom = "boxplot" )
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = factor(Pclass), color = Survived, data = training, geom = "boxplot" )
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = factor(Pclass), color = Survived, data = training, geom = "boxplot", stat = "count")
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = factor(Pclass), color = Survived, data = training, geom = "bar")
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = factor(Pclass), fill = Survived, data = training, geom = "bar")
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = factor(Pclass), fill = Survived, data = training, geom = "bar", stat = "identity")
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = factor(Pclass), fill = Survived, data = training, geom = "barplot", stat = "identity")
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
qplot(x = factor(Pclass), y = Survived, data = training, geom = "boxplot")
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
plot(x = factor(Pclass), y = Survived)
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
plot(x = factor(training$Pclass), y = training$Survived)
dev.off()
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
plot(x = factor(training$Pclass), y = training$Survived)
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
barplot(x = factor(training$Pclass), y = training$Survived)
# Clearly less people survived from the 3rd class
table(training$Survived,training$Pclass)
barplot(x = factor(training$Pclass), y = training$Survived)
summary(lm(Survived ~ Pclass, data = training))
summary(lm(Survived ~ factor(Pclass), data = training))
summary(glm(Survived ~ factor(Pclass), data = training, family = "binomial"))
summary(glm(factor(Survived) ~ factor(Pclass), data = training, family = "binomial"))
table(training$Survived,training$Sex)
summary(training)
table(training$Sex)
table(training$Embarked)
table(training$Survived)
table(training$Survived,training$Sex)
summary(glm(Survival ~ factor(Sex) + Age, data = training, family = "binomial"))
summary(glm(Survived ~ factor(Sex) + Age, data = training, family = "binomial"))
summary(glm(Survived ~ factor(Sex) + Age + Age:Sex, data = training, family = "binomial"))
summary(glm(Survived ~ factor(Sex) + Age + Age *Sex, data = training, family = "binomial"))
summary(glm(Survived ~  Age *Sex, data = training, family = "binomial"))
boxplot(log(Fare) ~ Survived, data = training)
summary(glm(Survived ~ factor(Pclass) + Fare, data = training, family = "binom"))
summary(glm(Survived ~ factor(Pclass) + Fare, data = training, family = "binomial"))
qplot(y = log(Fare), x = Survived, data = training, geom = "boxplot")
qplot(y = log(Fare), x = factor(Survived), data = training, geom = "boxplot")
qplot(y = log(Fare), x = factor(Survived), data = training, geom = "boxplot", fill = Survived)+theme_bw()+scale_fill_manual(values = c("red","navy"))
qplot(y = log(Fare), x = factor(Survived), data = training, geom = "boxplot", fill = factor(Survived))+theme_bw()+scale_fill_manual(values = c("red","navy"))
qplot(y = log(Fare), x = factor(Survived), data = training, geom = "boxplot", fill = factor(Survived))+theme_bw()+scale_fill_manual(values = c("red","lightgreen"))
summary(glm(Survived ~ factor(Pclass) + Fare, data = training, family = "binomial"))
training <- transform(training,Survived = factor(Survived), Pclass = factor(Pclass),
Sex = factor(Sex),SibSp = factor(SibSp), Parch = factor(Parch), Embarked = factor(Embarked))
tune.test.set <- transform(tune.test.set,Survived = factor(Survived), Pclass = factor(Pclass),Sex = factor(Sex),SibSp = factor(SibSp), Parch = factor(Parch), Embarked = factor(Embarked))
testing <- transform(testing, Pclass = factor(Pclass),
Sex = factor(Sex),SibSp = factor(SibSp), Parch = factor(Parch), Embarked = factor(Embarked))
